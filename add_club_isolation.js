import mysql from 'mysql2/promise';

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '3306'),
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'petanque_noveant',
};

async function addClubIsolation() {
  try {
    const connection = await mysql.createConnection(dbConfig);
    
    console.log('=== AJOUT DE L\'ISOLATION PAR CLUB ===\n');
    
    // Tables qui ont besoin du champ club_id
    const tablesToModify = [
      'carousel_images',
      'drinks', 
      'event_photos',
      'events',
      'home_carousel_images',
      'home_content',
      'member_types',
      'members',
      'teams'
    ];
    
    // Tables qui ont d√©j√† club_id mais qu'on v√©rifie
    const tablesToCheck = [
      'membership_requests',
      'users'
    ];
    
    // 1. R√©cup√©rer l'ID du club actuel
    const [clubData] = await connection.execute('SELECT id FROM clubs WHERE numero_ffpjp = ?', ['0092']);
    if (clubData.length === 0) {
      throw new Error('Club avec num√©ro FFPJP 0092 non trouv√©');
    }
    const clubId = clubData[0].id;
    console.log(`‚úÖ Club ID trouv√©: ${clubId} (FFPJP: 0092)\n`);
    
    // 2. Ajouter club_id aux tables qui en ont besoin
    for (const tableName of tablesToModify) {
      try {
        console.log(`üìã Traitement de la table: ${tableName}`);
        
        // V√©rifier si club_id existe d√©j√†
        const [columns] = await connection.execute(`DESCRIBE ${tableName}`);
        const hasClubId = columns.some(col => col.Field === 'club_id');
        
        if (!hasClubId) {
          // Ajouter la colonne club_id
          await connection.execute(`
            ALTER TABLE ${tableName} 
            ADD COLUMN club_id INT NOT NULL DEFAULT ${clubId}
          `);
          console.log(`   ‚úÖ Colonne club_id ajout√©e`);
          
          // Ajouter la contrainte de cl√© √©trang√®re
          await connection.execute(`
            ALTER TABLE ${tableName} 
            ADD CONSTRAINT fk_${tableName}_club_id 
            FOREIGN KEY (club_id) REFERENCES clubs(id) 
            ON DELETE RESTRICT ON UPDATE CASCADE
          `);
          console.log(`   ‚úÖ Contrainte FK ajout√©e`);
          
        } else {
          console.log(`   ‚ÑπÔ∏è Colonne club_id d√©j√† pr√©sente`);
        }
        
        // V√©rifier/mettre √† jour les donn√©es existantes
        await connection.execute(`UPDATE ${tableName} SET club_id = ? WHERE club_id IS NULL OR club_id = 0`, [clubId]);
        console.log(`   ‚úÖ Donn√©es mises √† jour avec club_id = ${clubId}`);
        
      } catch (error) {
        console.log(`   ‚ùå Erreur sur ${tableName}: ${error.message}`);
      }
      console.log('');
    }
    
    // 3. V√©rifier les tables qui ont d√©j√† club_id
    console.log('=== V√âRIFICATION DES TABLES EXISTANTES ===\n');
    for (const tableName of tablesToCheck) {
      try {
        const [data] = await connection.execute(`SELECT COUNT(*) as count, club_id FROM ${tableName} GROUP BY club_id`);
        console.log(`üìã Table ${tableName}:`);
        console.table(data);
      } catch (error) {
        console.log(`‚ùå Erreur sur ${tableName}: ${error.message}`);
      }
    }
    
    // 4. R√©sum√© final
    console.log('\n=== R√âSUM√â DE L\'ISOLATION PAR CLUB ===\n');
    console.log('üîê S√âCURIT√â MISE EN PLACE:');
    console.log(`   - Toutes les donn√©es appartiennent au club ID: ${clubId}`);
    console.log('   - Contraintes FK emp√™chent les r√©f√©rences invalides');
    console.log('   - Isolation compl√®te entre les clubs');
    console.log('   - Performance optimis√©e avec des cl√©s enti√®res');
    
    console.log('\nüìù PROCHAINES √âTAPES:');
    console.log('   1. Mettre √† jour les requ√™tes API pour filtrer par club_id');
    console.log('   2. Ajouter club_id dans les INSERT/UPDATE');
    console.log('   3. Tester l\'isolation des donn√©es');
    
    await connection.end();
    console.log('\nüéâ Isolation par club configur√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

addClubIsolation();