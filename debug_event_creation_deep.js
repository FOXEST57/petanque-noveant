import mysql from 'mysql2/promise';
import fetch from 'node-fetch';
import FormData from 'form-data';
import fs from 'fs';
import path from 'path';

// Configuration de la base de donn√©es
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: process.env.DB_PASSWORD || '',
    database: 'petanque_noveant'
};

async function debugEventCreation() {
    console.log('üîç D√âBOGAGE APPROFONDI - CR√âATION D\'√âV√âNEMENT ET UPLOAD PHOTOS');
    console.log('================================================================');
    
    let connection;
    
    try {
        // 1. Connexion √† la base de donn√©es
        console.log('\n1Ô∏è‚É£ Connexion √† la base de donn√©es...');
        connection = await mysql.createConnection(dbConfig);
        console.log('‚úÖ Connexion √©tablie');
        
        // 2. V√©rifier la structure de la table events
        console.log('\n2Ô∏è‚É£ V√©rification de la structure de la table events...');
        const [tableStructure] = await connection.execute('DESCRIBE events');
        console.log('Structure de la table events:');
        tableStructure.forEach(col => {
            console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'NO' ? 'NOT NULL' : 'NULL'} ${col.Key ? `(${col.Key})` : ''}`);
        });
        
        // 3. Test de cr√©ation d'√©v√©nement via API
        console.log('\n3Ô∏è‚É£ Test de cr√©ation d\'√©v√©nement via API...');
        
        // R√©cup√©rer un token valide
        const loginResponse = await fetch('http://localhost:3002/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: 'test_club1@test.com',
                password: 'password123'
            })
        });
        
        if (!loginResponse.ok) {
            throw new Error(`Login failed: ${loginResponse.status}`);
        }
        
        const loginData = await loginResponse.json();
        const token = loginData.token;
        console.log('‚úÖ Token obtenu:', token.substring(0, 20) + '...');
        
        // Cr√©er un √©v√©nement de test
        const eventData = {
            titre: `Test Debug Event ${Date.now()}`,
            description: '√âv√©nement de test pour d√©bogage',
            date: new Date().toISOString().split('T')[0],
            heure: '14:00',
            lieu: 'Terrain de test',
            prix: 10,
            max_participants: 20
        };
        
        console.log('üì§ Envoi des donn√©es d\'√©v√©nement:', eventData);
        
        const createResponse = await fetch('http://localhost:3002/api/events', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(eventData)
        });
        
        console.log('üì• Statut de la r√©ponse:', createResponse.status);
        
        if (!createResponse.ok) {
            const errorText = await createResponse.text();
            console.error('‚ùå Erreur lors de la cr√©ation:', errorText);
            return;
        }
        
        const createResult = await createResponse.json();
        console.log('‚úÖ √âv√©nement cr√©√© - R√©ponse compl√®te:', JSON.stringify(createResult, null, 2));
        
        // Analyser la structure de la r√©ponse
        console.log('\n4Ô∏è‚É£ Analyse de la r√©ponse de cr√©ation...');
        console.log('Type de la r√©ponse:', typeof createResult);
        console.log('Propri√©t√©s disponibles:', Object.keys(createResult));
        
        let eventId;
        if (createResult.data && createResult.data.id) {
            eventId = createResult.data.id;
            console.log('‚úÖ ID trouv√© dans createResult.data.id:', eventId);
        } else if (createResult.id) {
            eventId = createResult.id;
            console.log('‚úÖ ID trouv√© dans createResult.id:', eventId);
        } else {
            console.error('‚ùå Aucun ID trouv√© dans la r√©ponse!');
            console.log('Structure compl√®te:', createResult);
            return;
        }
        
        // 5. V√©rifier l'√©v√©nement dans la base de donn√©es
        console.log('\n5Ô∏è‚É£ V√©rification dans la base de donn√©es...');
        const [dbEvents] = await connection.execute('SELECT * FROM events WHERE id = ?', [eventId]);
        if (dbEvents.length > 0) {
            console.log('‚úÖ √âv√©nement trouv√© dans la DB:', dbEvents[0]);
        } else {
            console.error('‚ùå √âv√©nement non trouv√© dans la DB!');
        }
        
        // 6. Test d'upload de photos
        console.log('\n6Ô∏è‚É£ Test d\'upload de photos...');
        
        // Cr√©er un fichier de test temporaire
        const testImagePath = path.join(process.cwd(), 'test-image-debug.txt');
        fs.writeFileSync(testImagePath, 'Test image content for debugging');
        
        const formData = new FormData();
        formData.append('photos', fs.createReadStream(testImagePath), {
            filename: 'test-image.txt',
            contentType: 'text/plain'
        });
        
        const uploadUrl = `http://localhost:3002/api/events/${eventId}/photos`;
        console.log('üì§ URL d\'upload:', uploadUrl);
        console.log('üì§ Type d\'eventId:', typeof eventId);
        console.log('üì§ Valeur d\'eventId:', eventId);
        
        const uploadResponse = await fetch(uploadUrl, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        console.log('üì• Statut upload:', uploadResponse.status);
        
        if (!uploadResponse.ok) {
            const errorText = await uploadResponse.text();
            console.error('‚ùå Erreur upload:', errorText);
        } else {
            const uploadResult = await uploadResponse.json();
            console.log('‚úÖ Upload r√©ussi:', uploadResult);
        }
        
        // Nettoyer le fichier de test
        fs.unlinkSync(testImagePath);
        
        // 7. V√©rifier les photos dans la base de donn√©es
        console.log('\n7Ô∏è‚É£ V√©rification des photos dans la DB...');
        const [dbPhotos] = await connection.execute('SELECT * FROM event_photos WHERE event_id = ?', [eventId]);
        console.log('Photos trouv√©es:', dbPhotos);
        
    } catch (error) {
        console.error('‚ùå ERREUR CRITIQUE:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        if (connection) {
            await connection.end();
            console.log('\nüîå Connexion ferm√©e');
        }
    }
}

// Ex√©cuter le d√©bogage
debugEventCreation().catch(console.error);