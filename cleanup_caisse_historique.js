import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

dotenv.config();

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'petanque_noveant',
  port: parseInt(process.env.DB_PORT || '3306')
};

async function cleanupCaisseHistorique() {
  let connection;
  
  try {
    console.log('üîó Connexion √† la base de donn√©es...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connexion √©tablie');

    // √âtape 1: Supprimer les op√©rations de cr√©dit de caisse_historique
    console.log('\nüßπ √âtape 1: Suppression des op√©rations de cr√©dit dans caisse_historique');
    
    // D'abord, v√©rifier combien d'op√©rations de cr√©dit existent
    const [creditCount] = await connection.execute(
      "SELECT COUNT(*) as count FROM caisse_historique WHERE type_operation = 'credit'"
    );
    console.log(`üìä ${creditCount[0].count} op√©rations de cr√©dit trouv√©es`);
    
    if (creditCount[0].count > 0) {
      // Afficher les op√©rations qui vont √™tre supprim√©es
      const [creditOps] = await connection.execute(`
        SELECT id, date_operation, montant, description, membre_id 
        FROM caisse_historique 
        WHERE type_operation = 'credit'
        ORDER BY date_operation
      `);
      
      console.log('üìã Op√©rations de cr√©dit √† supprimer:');
      creditOps.forEach(op => {
        console.log(`   - ID ${op.id}: ${op.montant}‚Ç¨ pour membre ${op.membre_id} le ${op.date_operation}`);
      });
      
      // Supprimer les op√©rations de cr√©dit
      const [deleteResult] = await connection.execute(
        "DELETE FROM caisse_historique WHERE type_operation = 'credit'"
      );
      console.log(`‚úÖ ${deleteResult.affectedRows} op√©rations de cr√©dit supprim√©es`);
    } else {
      console.log('‚úÖ Aucune op√©ration de cr√©dit √† supprimer');
    }

    // √âtape 2: Supprimer l'ancienne colonne montant
    console.log('\nüßπ √âtape 2: Suppression de l\'ancienne colonne montant');
    
    // V√©rifier si la colonne existe
    const [columns] = await connection.execute(
      "SHOW COLUMNS FROM caisse_historique LIKE 'montant'"
    );
    
    if (columns.length > 0) {
      console.log('üìä Colonne montant trouv√©e, suppression en cours...');
      
      // Supprimer la colonne
      await connection.execute(
        "ALTER TABLE caisse_historique DROP COLUMN montant"
      );
      console.log('‚úÖ Colonne montant supprim√©e');
    } else {
      console.log('‚úÖ Colonne montant d√©j√† supprim√©e');
    }

    // √âtape 3: V√©rification finale
    console.log('\nüîç √âtape 3: V√©rification finale');
    
    // V√©rifier qu'il n'y a plus d'op√©rations de cr√©dit
    const [finalCreditCount] = await connection.execute(
      "SELECT COUNT(*) as count FROM caisse_historique WHERE type_operation = 'credit'"
    );
    console.log(`üìä Op√©rations de cr√©dit restantes: ${finalCreditCount[0].count}`);
    
    // V√©rifier que la colonne montant n'existe plus
    const [finalColumns] = await connection.execute(
      "SHOW COLUMNS FROM caisse_historique LIKE 'montant'"
    );
    console.log(`üìä Colonne montant: ${finalColumns.length === 0 ? 'Supprim√©e' : 'Existe encore'}`);
    
    // Afficher la structure finale
    console.log('\nüìã Structure finale de caisse_historique:');
    const [finalStructure] = await connection.execute("DESCRIBE caisse_historique");
    finalStructure.forEach(col => {
      console.log(`   - ${col.Field}: ${col.Type} ${col.Null === 'NO' ? 'NOT NULL' : 'NULL'}`);
    });

    // Afficher les statistiques finales
    const [stats] = await connection.execute(`
      SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN type_operation = 'ajout_especes' THEN 1 END) as ajout_especes,
        COUNT(CASE WHEN type_operation = 'retrait_especes' THEN 1 END) as retrait_especes,
        COUNT(CASE WHEN type_operation = 'depense' THEN 1 END) as depenses,
        COUNT(CASE WHEN type_operation = 'transfert_banque' THEN 1 END) as transferts_banque
      FROM caisse_historique
    `);
    
    console.log('\nüìä Statistiques finales de caisse_historique:');
    console.log(`   - Total: ${stats[0].total} op√©rations`);
    console.log(`   - Ajout esp√®ces: ${stats[0].ajout_especes}`);
    console.log(`   - Retrait esp√®ces: ${stats[0].retrait_especes}`);
    console.log(`   - D√©penses: ${stats[0].depenses}`);
    console.log(`   - Transferts banque: ${stats[0].transferts_banque}`);

    console.log('\nüéâ Nettoyage termin√© avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Connexion ferm√©e');
    }
  }
}

cleanupCaisseHistorique();